/* tslint:disable */
/* eslint-disable */
/**
 * mockAI
 * The Node based REST API documentation for mockAI
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DeleteMediaApiResponseDto,
  GetMediaResponseDto,
} from '../models/index';
import {
    DeleteMediaApiResponseDtoFromJSON,
    DeleteMediaApiResponseDtoToJSON,
    GetMediaResponseDtoFromJSON,
    GetMediaResponseDtoToJSON,
} from '../models/index';

export interface MediaUploadControllerDeleteMediaRequest {
    fileName: string;
}

export interface MediaUploadControllerGetMediaRequest {
    fileName: string;
}

/**
 * 
 */
export class MediaApi extends runtime.BaseAPI {

    /**
     * Delete media file by name
     */
    async mediaUploadControllerDeleteMediaRaw(requestParameters: MediaUploadControllerDeleteMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteMediaApiResponseDto>> {
        if (requestParameters['fileName'] == null) {
            throw new runtime.RequiredError(
                'fileName',
                'Required parameter "fileName" was null or undefined when calling mediaUploadControllerDeleteMedia().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fileName'] != null) {
            queryParameters['fileName'] = requestParameters['fileName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/media-upload/delete`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteMediaApiResponseDtoFromJSON(jsonValue));
    }

    /**
     * Delete media file by name
     */
    async mediaUploadControllerDeleteMedia(requestParameters: MediaUploadControllerDeleteMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteMediaApiResponseDto> {
        const response = await this.mediaUploadControllerDeleteMediaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get media file by name
     */
    async mediaUploadControllerGetMediaRaw(requestParameters: MediaUploadControllerGetMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMediaResponseDto>> {
        if (requestParameters['fileName'] == null) {
            throw new runtime.RequiredError(
                'fileName',
                'Required parameter "fileName" was null or undefined when calling mediaUploadControllerGetMedia().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fileName'] != null) {
            queryParameters['fileName'] = requestParameters['fileName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/media-upload/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMediaResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get media file by name
     */
    async mediaUploadControllerGetMedia(requestParameters: MediaUploadControllerGetMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMediaResponseDto> {
        const response = await this.mediaUploadControllerGetMediaRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
