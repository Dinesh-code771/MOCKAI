/* tslint:disable */
/* eslint-disable */
/**
 * mockAI
 * The Node based REST API documentation for mockAI
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ForgotPasswordApiResponse,
  ForgotPasswordDto,
  LoginApiResponse,
  LoginDto,
  ModelApiResponse,
  OtpDto,
  ResetPasswordApiResponse,
  ResetPasswordDto,
  UserResponseApiResponse,
  VerifyForgotPasswordOtpApiResponse,
  VerifyForgotPasswordOtpDto,
} from '../models/index';
import {
    ForgotPasswordApiResponseFromJSON,
    ForgotPasswordApiResponseToJSON,
    ForgotPasswordDtoFromJSON,
    ForgotPasswordDtoToJSON,
    LoginApiResponseFromJSON,
    LoginApiResponseToJSON,
    LoginDtoFromJSON,
    LoginDtoToJSON,
    ModelApiResponseFromJSON,
    ModelApiResponseToJSON,
    OtpDtoFromJSON,
    OtpDtoToJSON,
    ResetPasswordApiResponseFromJSON,
    ResetPasswordApiResponseToJSON,
    ResetPasswordDtoFromJSON,
    ResetPasswordDtoToJSON,
    UserResponseApiResponseFromJSON,
    UserResponseApiResponseToJSON,
    VerifyForgotPasswordOtpApiResponseFromJSON,
    VerifyForgotPasswordOtpApiResponseToJSON,
    VerifyForgotPasswordOtpDtoFromJSON,
    VerifyForgotPasswordOtpDtoToJSON,
} from '../models/index';

export interface AuthControllerAuthenticateWithGoogleRequest {
    nextUrl?: string;
}

export interface AuthControllerForgotPasswordRequest {
    forgotPasswordDto: ForgotPasswordDto;
}

export interface AuthControllerGoogleAuthRedirectRequest {
    state: string;
}

export interface AuthControllerLoginRequest {
    loginDto: LoginDto;
    xLandingAppId?: string;
}

export interface AuthControllerResetPasswordRequest {
    resetPasswordDto: ResetPasswordDto;
}

export interface AuthControllerVerifyForgotPasswordOtpRequest {
    verifyForgotPasswordOtpDto: VerifyForgotPasswordOtpDto;
}

export interface AuthControllerVerifyOtpRequest {
    otpDto: OtpDto;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Authenticate user with Google
     */
    async authControllerAuthenticateWithGoogleRaw(requestParameters: AuthControllerAuthenticateWithGoogleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['nextUrl'] != null) {
            queryParameters['next_url'] = requestParameters['nextUrl'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/auth/google`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Authenticate user with Google
     */
    async authControllerAuthenticateWithGoogle(requestParameters: AuthControllerAuthenticateWithGoogleRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerAuthenticateWithGoogleRaw(requestParameters, initOverrides);
    }

    /**
     * API to send OTP for password reset
     */
    async authControllerForgotPasswordRaw(requestParameters: AuthControllerForgotPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ForgotPasswordApiResponse>> {
        if (requestParameters['forgotPasswordDto'] == null) {
            throw new runtime.RequiredError(
                'forgotPasswordDto',
                'Required parameter "forgotPasswordDto" was null or undefined when calling authControllerForgotPassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/forgot-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ForgotPasswordDtoToJSON(requestParameters['forgotPasswordDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ForgotPasswordApiResponseFromJSON(jsonValue));
    }

    /**
     * API to send OTP for password reset
     */
    async authControllerForgotPassword(requestParameters: AuthControllerForgotPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ForgotPasswordApiResponse> {
        const response = await this.authControllerForgotPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to get logged in user
     */
    async authControllerGetLoggedInUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponseApiResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/auth/logged-in-user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseApiResponseFromJSON(jsonValue));
    }

    /**
     * API to get logged in user
     */
    async authControllerGetLoggedInUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponseApiResponse> {
        const response = await this.authControllerGetLoggedInUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * Authenticate user with Google
     */
    async authControllerGoogleAuthRedirectRaw(requestParameters: AuthControllerGoogleAuthRedirectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginApiResponse>> {
        if (requestParameters['state'] == null) {
            throw new runtime.RequiredError(
                'state',
                'Required parameter "state" was null or undefined when calling authControllerGoogleAuthRedirect().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/auth/google/redirect`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginApiResponseFromJSON(jsonValue));
    }

    /**
     * Authenticate user with Google
     */
    async authControllerGoogleAuthRedirect(requestParameters: AuthControllerGoogleAuthRedirectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginApiResponse> {
        const response = await this.authControllerGoogleAuthRedirectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to login
     */
    async authControllerLoginRaw(requestParameters: AuthControllerLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginApiResponse>> {
        if (requestParameters['loginDto'] == null) {
            throw new runtime.RequiredError(
                'loginDto',
                'Required parameter "loginDto" was null or undefined when calling authControllerLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xLandingAppId'] != null) {
            headerParameters['x-landing-app-id'] = String(requestParameters['xLandingAppId']);
        }

        const response = await this.request({
            path: `/v1/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginDtoToJSON(requestParameters['loginDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginApiResponseFromJSON(jsonValue));
    }

    /**
     * API to login
     */
    async authControllerLogin(requestParameters: AuthControllerLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginApiResponse> {
        const response = await this.authControllerLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to logout
     */
    async authControllerLogoutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelApiResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/auth/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * API to logout
     */
    async authControllerLogout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelApiResponse> {
        const response = await this.authControllerLogoutRaw(initOverrides);
        return await response.value();
    }

    /**
     * API to resend OTP
     */
    async authControllerResendOtpRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelApiResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/auth/resend-otp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * API to resend OTP
     */
    async authControllerResendOtp(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelApiResponse> {
        const response = await this.authControllerResendOtpRaw(initOverrides);
        return await response.value();
    }

    /**
     * API to reset password
     */
    async authControllerResetPasswordRaw(requestParameters: AuthControllerResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResetPasswordApiResponse>> {
        if (requestParameters['resetPasswordDto'] == null) {
            throw new runtime.RequiredError(
                'resetPasswordDto',
                'Required parameter "resetPasswordDto" was null or undefined when calling authControllerResetPassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/auth/reset-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetPasswordDtoToJSON(requestParameters['resetPasswordDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResetPasswordApiResponseFromJSON(jsonValue));
    }

    /**
     * API to reset password
     */
    async authControllerResetPassword(requestParameters: AuthControllerResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResetPasswordApiResponse> {
        const response = await this.authControllerResetPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to verify OTP for password reset
     */
    async authControllerVerifyForgotPasswordOtpRaw(requestParameters: AuthControllerVerifyForgotPasswordOtpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VerifyForgotPasswordOtpApiResponse>> {
        if (requestParameters['verifyForgotPasswordOtpDto'] == null) {
            throw new runtime.RequiredError(
                'verifyForgotPasswordOtpDto',
                'Required parameter "verifyForgotPasswordOtpDto" was null or undefined when calling authControllerVerifyForgotPasswordOtp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/auth/verify-forgot-password-otp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyForgotPasswordOtpDtoToJSON(requestParameters['verifyForgotPasswordOtpDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VerifyForgotPasswordOtpApiResponseFromJSON(jsonValue));
    }

    /**
     * API to verify OTP for password reset
     */
    async authControllerVerifyForgotPasswordOtp(requestParameters: AuthControllerVerifyForgotPasswordOtpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VerifyForgotPasswordOtpApiResponse> {
        const response = await this.authControllerVerifyForgotPasswordOtpRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to verify OTP
     */
    async authControllerVerifyOtpRaw(requestParameters: AuthControllerVerifyOtpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginApiResponse>> {
        if (requestParameters['otpDto'] == null) {
            throw new runtime.RequiredError(
                'otpDto',
                'Required parameter "otpDto" was null or undefined when calling authControllerVerifyOtp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/auth/verify-otp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OtpDtoToJSON(requestParameters['otpDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginApiResponseFromJSON(jsonValue));
    }

    /**
     * API to verify OTP
     */
    async authControllerVerifyOtp(requestParameters: AuthControllerVerifyOtpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginApiResponse> {
        const response = await this.authControllerVerifyOtpRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
