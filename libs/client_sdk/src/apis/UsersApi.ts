/* tslint:disable */
/* eslint-disable */
/**
 * mockAI
 * The Node based REST API documentation for mockAI
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UpdateUserProfileDto,
  UserProfileApiResponse,
} from '../models/index';
import {
    UpdateUserProfileDtoFromJSON,
    UpdateUserProfileDtoToJSON,
    UserProfileApiResponseFromJSON,
    UserProfileApiResponseToJSON,
} from '../models/index';

export interface UsersControllerUpdateUserProfileRequest {
    updateUserProfileDto: UpdateUserProfileDto;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * API to get user profile with enrolled courses
     */
    async usersControllerGetUserProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserProfileApiResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/users/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileApiResponseFromJSON(jsonValue));
    }

    /**
     * API to get user profile with enrolled courses
     */
    async usersControllerGetUserProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserProfileApiResponse> {
        const response = await this.usersControllerGetUserProfileRaw(initOverrides);
        return await response.value();
    }

    /**
     * API to update user profile (full_name, gender, enrolled courses)
     */
    async usersControllerUpdateUserProfileRaw(requestParameters: UsersControllerUpdateUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserProfileApiResponse>> {
        if (requestParameters['updateUserProfileDto'] == null) {
            throw new runtime.RequiredError(
                'updateUserProfileDto',
                'Required parameter "updateUserProfileDto" was null or undefined when calling usersControllerUpdateUserProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/users/profile`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserProfileDtoToJSON(requestParameters['updateUserProfileDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileApiResponseFromJSON(jsonValue));
    }

    /**
     * API to update user profile (full_name, gender, enrolled courses)
     */
    async usersControllerUpdateUserProfile(requestParameters: UsersControllerUpdateUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserProfileApiResponse> {
        const response = await this.usersControllerUpdateUserProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
