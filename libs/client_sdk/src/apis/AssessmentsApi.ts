/* tslint:disable */
/* eslint-disable */
/**
 * mockAI
 * The Node based REST API documentation for mockAI
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssessmentListApiResponse,
  CompleteAssessmentApiResponse,
  StartAssessmentApiResponse,
  StartAssessmentBodyDto,
  StoreAnswerDto,
  UserAssessmentListApiResponse,
} from '../models/index';
import {
    AssessmentListApiResponseFromJSON,
    AssessmentListApiResponseToJSON,
    CompleteAssessmentApiResponseFromJSON,
    CompleteAssessmentApiResponseToJSON,
    StartAssessmentApiResponseFromJSON,
    StartAssessmentApiResponseToJSON,
    StartAssessmentBodyDtoFromJSON,
    StartAssessmentBodyDtoToJSON,
    StoreAnswerDtoFromJSON,
    StoreAnswerDtoToJSON,
    UserAssessmentListApiResponseFromJSON,
    UserAssessmentListApiResponseToJSON,
} from '../models/index';

export interface AssessmentsControllerCompleteAssessmentRequest {
    userAssessmentId: string;
}

export interface AssessmentsControllerGetAssessmentsListRequest {
    type?: AssessmentsControllerGetAssessmentsListTypeEnum;
    courseId?: string;
    difficulty?: AssessmentsControllerGetAssessmentsListDifficultyEnum;
    page?: number;
    limit?: number;
}

export interface AssessmentsControllerGetUserAssessmentCompleteDataRequest {
    userAssessmentId: string;
}

export interface AssessmentsControllerGetUserAssessmentsRequest {
    type?: AssessmentsControllerGetUserAssessmentsTypeEnum;
    courseId?: string;
    difficulty?: AssessmentsControllerGetUserAssessmentsDifficultyEnum;
    page?: number;
    limit?: number;
    status?: AssessmentsControllerGetUserAssessmentsStatusEnum;
}

export interface AssessmentsControllerStartAssessmentRequest {
    startAssessmentBodyDto: StartAssessmentBodyDto;
}

export interface AssessmentsControllerStoreUserAnswersRequest {
    userAssessmentId: string;
    questionId: string;
    storeAnswerDto: StoreAnswerDto;
}

/**
 * 
 */
export class AssessmentsApi extends runtime.BaseAPI {

    /**
     * Mark an assessment as completed and calculate final results
     * Complete an assessment
     */
    async assessmentsControllerCompleteAssessmentRaw(requestParameters: AssessmentsControllerCompleteAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompleteAssessmentApiResponse>> {
        if (requestParameters['userAssessmentId'] == null) {
            throw new runtime.RequiredError(
                'userAssessmentId',
                'Required parameter "userAssessmentId" was null or undefined when calling assessmentsControllerCompleteAssessment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/assessments/user-assessment/{userAssessmentId}/complete`.replace(`{${"userAssessmentId"}}`, encodeURIComponent(String(requestParameters['userAssessmentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompleteAssessmentApiResponseFromJSON(jsonValue));
    }

    /**
     * Mark an assessment as completed and calculate final results
     * Complete an assessment
     */
    async assessmentsControllerCompleteAssessment(requestParameters: AssessmentsControllerCompleteAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompleteAssessmentApiResponse> {
        const response = await this.assessmentsControllerCompleteAssessmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve assessments with optional filters for type, course_id, and difficulty. Supports pagination.
     * Get list of assessments with filtering and pagination
     */
    async assessmentsControllerGetAssessmentsListRaw(requestParameters: AssessmentsControllerGetAssessmentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssessmentListApiResponse>> {
        const queryParameters: any = {};

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['courseId'] != null) {
            queryParameters['course_id'] = requestParameters['courseId'];
        }

        if (requestParameters['difficulty'] != null) {
            queryParameters['difficulty'] = requestParameters['difficulty'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/assessments/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssessmentListApiResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve assessments with optional filters for type, course_id, and difficulty. Supports pagination.
     * Get list of assessments with filtering and pagination
     */
    async assessmentsControllerGetAssessmentsList(requestParameters: AssessmentsControllerGetAssessmentsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssessmentListApiResponse> {
        const response = await this.assessmentsControllerGetAssessmentsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve complete assessment data including results and answers
     * Get completed assessment data
     */
    async assessmentsControllerGetUserAssessmentCompleteDataRaw(requestParameters: AssessmentsControllerGetUserAssessmentCompleteDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompleteAssessmentApiResponse>> {
        if (requestParameters['userAssessmentId'] == null) {
            throw new runtime.RequiredError(
                'userAssessmentId',
                'Required parameter "userAssessmentId" was null or undefined when calling assessmentsControllerGetUserAssessmentCompleteData().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/assessments/user-assessment/{userAssessmentId}/complete-data`.replace(`{${"userAssessmentId"}}`, encodeURIComponent(String(requestParameters['userAssessmentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompleteAssessmentApiResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve complete assessment data including results and answers
     * Get completed assessment data
     */
    async assessmentsControllerGetUserAssessmentCompleteData(requestParameters: AssessmentsControllerGetUserAssessmentCompleteDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompleteAssessmentApiResponse> {
        const response = await this.assessmentsControllerGetUserAssessmentCompleteDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve user assessments with optional filters for type, course_id, difficulty, and status. Supports pagination. Scores are shown as null for scheduled and in_progress assessments.
     * Get user assessments with filtering and pagination
     */
    async assessmentsControllerGetUserAssessmentsRaw(requestParameters: AssessmentsControllerGetUserAssessmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserAssessmentListApiResponse>> {
        const queryParameters: any = {};

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['courseId'] != null) {
            queryParameters['course_id'] = requestParameters['courseId'];
        }

        if (requestParameters['difficulty'] != null) {
            queryParameters['difficulty'] = requestParameters['difficulty'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/assessments/user-assessments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserAssessmentListApiResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve user assessments with optional filters for type, course_id, difficulty, and status. Supports pagination. Scores are shown as null for scheduled and in_progress assessments.
     * Get user assessments with filtering and pagination
     */
    async assessmentsControllerGetUserAssessments(requestParameters: AssessmentsControllerGetUserAssessmentsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserAssessmentListApiResponse> {
        const response = await this.assessmentsControllerGetUserAssessmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * If userAssessmentId is provided, checks existing assessment and returns questions if within duration. If assessmentId is provided, creates new user assessment with status in_progress and returns questions.
     * Start an assessment
     */
    async assessmentsControllerStartAssessmentRaw(requestParameters: AssessmentsControllerStartAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StartAssessmentApiResponse>> {
        if (requestParameters['startAssessmentBodyDto'] == null) {
            throw new runtime.RequiredError(
                'startAssessmentBodyDto',
                'Required parameter "startAssessmentBodyDto" was null or undefined when calling assessmentsControllerStartAssessment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/assessments/start`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StartAssessmentBodyDtoToJSON(requestParameters['startAssessmentBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StartAssessmentApiResponseFromJSON(jsonValue));
    }

    /**
     * If userAssessmentId is provided, checks existing assessment and returns questions if within duration. If assessmentId is provided, creates new user assessment with status in_progress and returns questions.
     * Start an assessment
     */
    async assessmentsControllerStartAssessment(requestParameters: AssessmentsControllerStartAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StartAssessmentApiResponse> {
        const response = await this.assessmentsControllerStartAssessmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store user answers for a question
     * Store user answers
     */
    async assessmentsControllerStoreUserAnswersRaw(requestParameters: AssessmentsControllerStoreUserAnswersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userAssessmentId'] == null) {
            throw new runtime.RequiredError(
                'userAssessmentId',
                'Required parameter "userAssessmentId" was null or undefined when calling assessmentsControllerStoreUserAnswers().'
            );
        }

        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling assessmentsControllerStoreUserAnswers().'
            );
        }

        if (requestParameters['storeAnswerDto'] == null) {
            throw new runtime.RequiredError(
                'storeAnswerDto',
                'Required parameter "storeAnswerDto" was null or undefined when calling assessmentsControllerStoreUserAnswers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/assessments/user-assessment/{userAssessmentId}/question/{questionId}`.replace(`{${"userAssessmentId"}}`, encodeURIComponent(String(requestParameters['userAssessmentId']))).replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters['questionId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreAnswerDtoToJSON(requestParameters['storeAnswerDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Store user answers for a question
     * Store user answers
     */
    async assessmentsControllerStoreUserAnswers(requestParameters: AssessmentsControllerStoreUserAnswersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assessmentsControllerStoreUserAnswersRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const AssessmentsControllerGetAssessmentsListTypeEnum = {
    Mcq: 'mcq',
    Subjective: 'subjective'
} as const;
export type AssessmentsControllerGetAssessmentsListTypeEnum = typeof AssessmentsControllerGetAssessmentsListTypeEnum[keyof typeof AssessmentsControllerGetAssessmentsListTypeEnum];
/**
 * @export
 */
export const AssessmentsControllerGetAssessmentsListDifficultyEnum = {
    Beginner: 'beginner',
    Intermediate: 'intermediate',
    Advanced: 'advanced'
} as const;
export type AssessmentsControllerGetAssessmentsListDifficultyEnum = typeof AssessmentsControllerGetAssessmentsListDifficultyEnum[keyof typeof AssessmentsControllerGetAssessmentsListDifficultyEnum];
/**
 * @export
 */
export const AssessmentsControllerGetUserAssessmentsTypeEnum = {
    Mcq: 'mcq',
    Subjective: 'subjective'
} as const;
export type AssessmentsControllerGetUserAssessmentsTypeEnum = typeof AssessmentsControllerGetUserAssessmentsTypeEnum[keyof typeof AssessmentsControllerGetUserAssessmentsTypeEnum];
/**
 * @export
 */
export const AssessmentsControllerGetUserAssessmentsDifficultyEnum = {
    Beginner: 'beginner',
    Intermediate: 'intermediate',
    Advanced: 'advanced'
} as const;
export type AssessmentsControllerGetUserAssessmentsDifficultyEnum = typeof AssessmentsControllerGetUserAssessmentsDifficultyEnum[keyof typeof AssessmentsControllerGetUserAssessmentsDifficultyEnum];
/**
 * @export
 */
export const AssessmentsControllerGetUserAssessmentsStatusEnum = {
    Scheduled: 'scheduled',
    InProgress: 'in_progress',
    Completed: 'completed',
    Cancelled: 'cancelled',
    NoShow: 'no_show'
} as const;
export type AssessmentsControllerGetUserAssessmentsStatusEnum = typeof AssessmentsControllerGetUserAssessmentsStatusEnum[keyof typeof AssessmentsControllerGetUserAssessmentsStatusEnum];
