/* tslint:disable */
/* eslint-disable */
/**
 * mockAI
 * The Node based REST API documentation for mockAI
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UserAssessmentItemDto
 */
export interface UserAssessmentItemDto {
    /**
     * Assessment ID
     * @type {string}
     * @memberof UserAssessmentItemDto
     */
    id: string;
    /**
     * Assessment name
     * @type {string}
     * @memberof UserAssessmentItemDto
     */
    name: string;
    /**
     * Assessment type
     * @type {string}
     * @memberof UserAssessmentItemDto
     */
    type: UserAssessmentItemDtoTypeEnum;
    /**
     * Difficulty level
     * @type {string}
     * @memberof UserAssessmentItemDto
     */
    difficulty: UserAssessmentItemDtoDifficultyEnum;
    /**
     * Duration in minutes
     * @type {number}
     * @memberof UserAssessmentItemDto
     */
    duration_minutes: number;
    /**
     * Assessment description
     * @type {string}
     * @memberof UserAssessmentItemDto
     */
    description: string | null;
    /**
     * Maximum score
     * @type {number}
     * @memberof UserAssessmentItemDto
     */
    max_score: number;
    /**
     * Total number of questions
     * @type {number}
     * @memberof UserAssessmentItemDto
     */
    total_questions: number;
    /**
     * Creation timestamp
     * @type {Date}
     * @memberof UserAssessmentItemDto
     */
    created_at: Date;
    /**
     * User assessment details
     * @type {object}
     * @memberof UserAssessmentItemDto
     */
    user_assessment: object;
    /**
     * Course information
     * @type {object}
     * @memberof UserAssessmentItemDto
     */
    course: object | null;
}


/**
 * @export
 */
export const UserAssessmentItemDtoTypeEnum = {
    Mcq: 'mcq',
    Subjective: 'subjective'
} as const;
export type UserAssessmentItemDtoTypeEnum = typeof UserAssessmentItemDtoTypeEnum[keyof typeof UserAssessmentItemDtoTypeEnum];

/**
 * @export
 */
export const UserAssessmentItemDtoDifficultyEnum = {
    Beginner: 'beginner',
    Intermediate: 'intermediate',
    Advanced: 'advanced'
} as const;
export type UserAssessmentItemDtoDifficultyEnum = typeof UserAssessmentItemDtoDifficultyEnum[keyof typeof UserAssessmentItemDtoDifficultyEnum];


/**
 * Check if a given object implements the UserAssessmentItemDto interface.
 */
export function instanceOfUserAssessmentItemDto(value: object): value is UserAssessmentItemDto {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('difficulty' in value) || value['difficulty'] === undefined) return false;
    if (!('duration_minutes' in value) || value['duration_minutes'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('max_score' in value) || value['max_score'] === undefined) return false;
    if (!('total_questions' in value) || value['total_questions'] === undefined) return false;
    if (!('created_at' in value) || value['created_at'] === undefined) return false;
    if (!('user_assessment' in value) || value['user_assessment'] === undefined) return false;
    if (!('course' in value) || value['course'] === undefined) return false;
    return true;
}

export function UserAssessmentItemDtoFromJSON(json: any): UserAssessmentItemDto {
    return UserAssessmentItemDtoFromJSONTyped(json, false);
}

export function UserAssessmentItemDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserAssessmentItemDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'type': json['type'],
        'difficulty': json['difficulty'],
        'duration_minutes': json['duration_minutes'],
        'description': json['description'],
        'max_score': json['max_score'],
        'total_questions': json['total_questions'],
        'created_at': (new Date(json['created_at'])),
        'user_assessment': json['user_assessment'],
        'course': json['course'],
    };
}

export function UserAssessmentItemDtoToJSON(value?: UserAssessmentItemDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'name': value['name'],
        'type': value['type'],
        'difficulty': value['difficulty'],
        'duration_minutes': value['duration_minutes'],
        'description': value['description'],
        'max_score': value['max_score'],
        'total_questions': value['total_questions'],
        'created_at': ((value['created_at']).toISOString()),
        'user_assessment': value['user_assessment'],
        'course': value['course'],
    };
}

