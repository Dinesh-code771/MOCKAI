/* tslint:disable */
/* eslint-disable */
/**
 * mockAI
 * The Node based REST API documentation for mockAI
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserAnswerDto } from './UserAnswerDto';
import {
    UserAnswerDtoFromJSON,
    UserAnswerDtoFromJSONTyped,
    UserAnswerDtoToJSON,
} from './UserAnswerDto';

/**
 * 
 * @export
 * @interface QuestionDto
 */
export interface QuestionDto {
    /**
     * Question ID
     * @type {string}
     * @memberof QuestionDto
     */
    id: string;
    /**
     * Question text
     * @type {string}
     * @memberof QuestionDto
     */
    question_text: string;
    /**
     * Question type
     * @type {string}
     * @memberof QuestionDto
     */
    question_type: QuestionDtoQuestionTypeEnum;
    /**
     * Question options (for MCQ questions)
     * @type {Array<string>}
     * @memberof QuestionDto
     */
    options: Array<string> | null;
    /**
     * Difficulty level
     * @type {string}
     * @memberof QuestionDto
     */
    difficulty: QuestionDtoDifficultyEnum;
    /**
     * Question order sequence
     * @type {number}
     * @memberof QuestionDto
     */
    order_sequence: number;
    /**
     * User answers
     * @type {UserAnswerDto}
     * @memberof QuestionDto
     */
    user_answers?: UserAnswerDto | null;
}


/**
 * @export
 */
export const QuestionDtoQuestionTypeEnum = {
    Mcq: 'mcq',
    Subjective: 'subjective'
} as const;
export type QuestionDtoQuestionTypeEnum = typeof QuestionDtoQuestionTypeEnum[keyof typeof QuestionDtoQuestionTypeEnum];

/**
 * @export
 */
export const QuestionDtoDifficultyEnum = {
    Beginner: 'beginner',
    Intermediate: 'intermediate',
    Advanced: 'advanced'
} as const;
export type QuestionDtoDifficultyEnum = typeof QuestionDtoDifficultyEnum[keyof typeof QuestionDtoDifficultyEnum];


/**
 * Check if a given object implements the QuestionDto interface.
 */
export function instanceOfQuestionDto(value: object): value is QuestionDto {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('question_text' in value) || value['question_text'] === undefined) return false;
    if (!('question_type' in value) || value['question_type'] === undefined) return false;
    if (!('options' in value) || value['options'] === undefined) return false;
    if (!('difficulty' in value) || value['difficulty'] === undefined) return false;
    if (!('order_sequence' in value) || value['order_sequence'] === undefined) return false;
    return true;
}

export function QuestionDtoFromJSON(json: any): QuestionDto {
    return QuestionDtoFromJSONTyped(json, false);
}

export function QuestionDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestionDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'question_text': json['question_text'],
        'question_type': json['question_type'],
        'options': json['options'],
        'difficulty': json['difficulty'],
        'order_sequence': json['order_sequence'],
        'user_answers': json['user_answers'] == null ? undefined : UserAnswerDtoFromJSON(json['user_answers']),
    };
}

export function QuestionDtoToJSON(value?: QuestionDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'question_text': value['question_text'],
        'question_type': value['question_type'],
        'options': value['options'],
        'difficulty': value['difficulty'],
        'order_sequence': value['order_sequence'],
        'user_answers': UserAnswerDtoToJSON(value['user_answers']),
    };
}

