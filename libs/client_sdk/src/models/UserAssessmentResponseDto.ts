/* tslint:disable */
/* eslint-disable */
/**
 * mockAI
 * The Node based REST API documentation for mockAI
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AssessmentDetailsDto } from './AssessmentDetailsDto';
import {
    AssessmentDetailsDtoFromJSON,
    AssessmentDetailsDtoFromJSONTyped,
    AssessmentDetailsDtoToJSON,
} from './AssessmentDetailsDto';
import type { QuestionDto } from './QuestionDto';
import {
    QuestionDtoFromJSON,
    QuestionDtoFromJSONTyped,
    QuestionDtoToJSON,
} from './QuestionDto';

/**
 * 
 * @export
 * @interface UserAssessmentResponseDto
 */
export interface UserAssessmentResponseDto {
    /**
     * User Assessment ID
     * @type {string}
     * @memberof UserAssessmentResponseDto
     */
    id: string;
    /**
     * User ID
     * @type {string}
     * @memberof UserAssessmentResponseDto
     */
    user_id: string;
    /**
     * Assessment ID
     * @type {string}
     * @memberof UserAssessmentResponseDto
     */
    assessment_id: string;
    /**
     * Scheduled time
     * @type {string}
     * @memberof UserAssessmentResponseDto
     */
    scheduled_at: string;
    /**
     * Started time
     * @type {string}
     * @memberof UserAssessmentResponseDto
     */
    started_at?: string;
    /**
     * Assessment status
     * @type {string}
     * @memberof UserAssessmentResponseDto
     */
    status: UserAssessmentResponseDtoStatusEnum;
    /**
     * Assessment details
     * @type {AssessmentDetailsDto}
     * @memberof UserAssessmentResponseDto
     */
    assessment: AssessmentDetailsDto;
    /**
     * Questions in the assessment
     * @type {Array<QuestionDto>}
     * @memberof UserAssessmentResponseDto
     */
    questions: Array<QuestionDto>;
    /**
     * Remaining time in seconds
     * @type {number}
     * @memberof UserAssessmentResponseDto
     */
    remaining_time_seconds?: number;
}


/**
 * @export
 */
export const UserAssessmentResponseDtoStatusEnum = {
    Scheduled: 'scheduled',
    InProgress: 'in_progress',
    Completed: 'completed',
    Cancelled: 'cancelled',
    NoShow: 'no_show'
} as const;
export type UserAssessmentResponseDtoStatusEnum = typeof UserAssessmentResponseDtoStatusEnum[keyof typeof UserAssessmentResponseDtoStatusEnum];


/**
 * Check if a given object implements the UserAssessmentResponseDto interface.
 */
export function instanceOfUserAssessmentResponseDto(value: object): value is UserAssessmentResponseDto {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('user_id' in value) || value['user_id'] === undefined) return false;
    if (!('assessment_id' in value) || value['assessment_id'] === undefined) return false;
    if (!('scheduled_at' in value) || value['scheduled_at'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('assessment' in value) || value['assessment'] === undefined) return false;
    if (!('questions' in value) || value['questions'] === undefined) return false;
    return true;
}

export function UserAssessmentResponseDtoFromJSON(json: any): UserAssessmentResponseDto {
    return UserAssessmentResponseDtoFromJSONTyped(json, false);
}

export function UserAssessmentResponseDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserAssessmentResponseDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'user_id': json['user_id'],
        'assessment_id': json['assessment_id'],
        'scheduled_at': json['scheduled_at'],
        'started_at': json['started_at'] == null ? undefined : json['started_at'],
        'status': json['status'],
        'assessment': AssessmentDetailsDtoFromJSON(json['assessment']),
        'questions': ((json['questions'] as Array<any>).map(QuestionDtoFromJSON)),
        'remaining_time_seconds': json['remaining_time_seconds'] == null ? undefined : json['remaining_time_seconds'],
    };
}

export function UserAssessmentResponseDtoToJSON(value?: UserAssessmentResponseDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'user_id': value['user_id'],
        'assessment_id': value['assessment_id'],
        'scheduled_at': value['scheduled_at'],
        'started_at': value['started_at'],
        'status': value['status'],
        'assessment': AssessmentDetailsDtoToJSON(value['assessment']),
        'questions': ((value['questions'] as Array<any>).map(QuestionDtoToJSON)),
        'remaining_time_seconds': value['remaining_time_seconds'],
    };
}

